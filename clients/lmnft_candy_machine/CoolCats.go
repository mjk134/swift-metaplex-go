// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package nft_candy_machine

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// CoolCats is the `coolCats` instruction.
type CoolCats struct {
	NewBase *string

	// [0] = [WRITE] candyMachine
	//
	// [1] = [WRITE, SIGNER] me
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewCoolCatsInstructionBuilder creates a new `CoolCats` instruction builder.
func NewCoolCatsInstructionBuilder() *CoolCats {
	nd := &CoolCats{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 2),
	}
	return nd
}

// SetNewBase sets the "newBase" parameter.
func (inst *CoolCats) SetNewBase(newBase string) *CoolCats {
	inst.NewBase = &newBase
	return inst
}

// SetCandyMachineAccount sets the "candyMachine" account.
func (inst *CoolCats) SetCandyMachineAccount(candyMachine ag_solanago.PublicKey) *CoolCats {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(candyMachine).WRITE()
	return inst
}

// GetCandyMachineAccount gets the "candyMachine" account.
func (inst *CoolCats) GetCandyMachineAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetMeAccount sets the "me" account.
func (inst *CoolCats) SetMeAccount(me ag_solanago.PublicKey) *CoolCats {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(me).WRITE().SIGNER()
	return inst
}

// GetMeAccount gets the "me" account.
func (inst *CoolCats) GetMeAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

func (inst CoolCats) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_CoolCats,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst CoolCats) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *CoolCats) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.NewBase == nil {
			return errors.New("NewBase parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.CandyMachine is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Me is not set")
		}
	}
	return nil
}

func (inst *CoolCats) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("CoolCats")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("NewBase", *inst.NewBase))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=2]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("candyMachine", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("          me", inst.AccountMetaSlice.Get(1)))
					})
				})
		})
}

func (obj CoolCats) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `NewBase` param:
	err = encoder.Encode(obj.NewBase)
	if err != nil {
		return err
	}
	return nil
}
func (obj *CoolCats) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `NewBase`:
	err = decoder.Decode(&obj.NewBase)
	if err != nil {
		return err
	}
	return nil
}

// NewCoolCatsInstruction declares a new CoolCats instruction with the provided parameters and accounts.
func NewCoolCatsInstruction(
	// Parameters:
	newBase string,
	// Accounts:
	candyMachine ag_solanago.PublicKey,
	me ag_solanago.PublicKey) *CoolCats {
	return NewCoolCatsInstructionBuilder().
		SetNewBase(newBase).
		SetCandyMachineAccount(candyMachine).
		SetMeAccount(me)
}
