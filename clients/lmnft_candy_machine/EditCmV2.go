// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package nft_candy_machine

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// EditCmV2 is the `editCmV2` instruction.
type EditCmV2 struct {
	Data *CandyMachineDataV2

	// [0] = [SIGNER] authority
	//
	// [1] = [WRITE] candyMachine
	//
	// [2] = [] clock
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewEditCmV2InstructionBuilder creates a new `EditCmV2` instruction builder.
func NewEditCmV2InstructionBuilder() *EditCmV2 {
	nd := &EditCmV2{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 3),
	}
	return nd
}

// SetData sets the "data" parameter.
func (inst *EditCmV2) SetData(data CandyMachineDataV2) *EditCmV2 {
	inst.Data = &data
	return inst
}

// SetAuthorityAccount sets the "authority" account.
func (inst *EditCmV2) SetAuthorityAccount(authority ag_solanago.PublicKey) *EditCmV2 {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(authority).SIGNER()
	return inst
}

// GetAuthorityAccount gets the "authority" account.
func (inst *EditCmV2) GetAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetCandyMachineAccount sets the "candyMachine" account.
func (inst *EditCmV2) SetCandyMachineAccount(candyMachine ag_solanago.PublicKey) *EditCmV2 {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(candyMachine).WRITE()
	return inst
}

// GetCandyMachineAccount gets the "candyMachine" account.
func (inst *EditCmV2) GetCandyMachineAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetClockAccount sets the "clock" account.
func (inst *EditCmV2) SetClockAccount(clock ag_solanago.PublicKey) *EditCmV2 {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(clock)
	return inst
}

// GetClockAccount gets the "clock" account.
func (inst *EditCmV2) GetClockAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

func (inst EditCmV2) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_EditCmV2,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst EditCmV2) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *EditCmV2) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Data == nil {
			return errors.New("Data parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Authority is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.CandyMachine is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Clock is not set")
		}
	}
	return nil
}

func (inst *EditCmV2) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("EditCmV2")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Data", *inst.Data))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=3]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("   authority", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("candyMachine", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("       clock", inst.AccountMetaSlice.Get(2)))
					})
				})
		})
}

func (obj EditCmV2) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Data` param:
	err = encoder.Encode(obj.Data)
	if err != nil {
		return err
	}
	return nil
}
func (obj *EditCmV2) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Data`:
	err = decoder.Decode(&obj.Data)
	if err != nil {
		return err
	}
	return nil
}

// NewEditCmV2Instruction declares a new EditCmV2 instruction with the provided parameters and accounts.
func NewEditCmV2Instruction(
	// Parameters:
	data CandyMachineDataV2,
	// Accounts:
	authority ag_solanago.PublicKey,
	candyMachine ag_solanago.PublicKey,
	clock ag_solanago.PublicKey) *EditCmV2 {
	return NewEditCmV2InstructionBuilder().
		SetData(data).
		SetAuthorityAccount(authority).
		SetCandyMachineAccount(candyMachine).
		SetClockAccount(clock)
}
